도커의 정의 
- 데이터 또는 프로그램을 격리시키는 기능
- 운영체제 통째로 격리하는 기능이 있다. 

도커의 구조 
- 운영체제 위에 도커 엔진이 동작하고 그 위에서 컨테이너가 동작한다. 
- 도커 엔진 아래에도 리눅스 운영체제가 있는데, 컨테이너 속에 또 리눅스 운영체제가 있다. 
- 도커는 리눅스 운영체제가 동작하는 것을 전제로 하는 구조로 되어있다.

--> 서버 컴퓨터 --> 리눅스 운영체제(커널 역할) --> 도커 엔진 --> 컨테이너(리눅스 포함(주변 부분))

이미지와 컨테이너 
- 컨테이너 : 프로그램을 저장한 창고
- 컨테이너는 이미지와 컨테이너를 조합하여 만들 수 있다.  
- 한 컨테이너에 여러 프로그램을 넣을 수 있고, 한 컨테이너에 하나의 프로그램만 넣어 도커엔진을 실행할 수 있다. 

도커의 장점 
- 독립된 환경 : 여러개의 컨테이너를 띄울 수 있으며, 똑같은 애플리케이션도 여러 개 띄울 수 있다.
- 이미지를 만들 수 있다 : 구축 작업이 쉽고, 교체나 업데이트가 쉽다. 또한 이동성이 좋다. 
- 커널을 포함시킬 필요가 없다. : 도커는 가벼운 플랫폼

도커의 단점 
- 리눅스 서버만 지원한다.
- 물리 서버에 문제가 생기면 모든 컨테이너에 영향이 간다. 

도커의 용도 
- 팀원 모두에게 동일한 개발환경 제공하기 (내가 공부하는 이유)
- 새로운 버전 테스트(= 격리된 환경을 이용) 
- 동일한 서버가 여러 대 필요한 경우(= 컨테이너 밖과 독립된 성질을 이용)  

도커 간단하게 시작하기 
docker run -it <IMAGE:TAG> --name <CONTAINER_NAME> # 이름은 선택사항

이미지 확인 
docker images

컨테이너 확인 
docker ps     # 실행되는 컨테이너만 확인 
docker ps -a  # 실행하고 있지 않은 컨테이너도 확인 

이미지 pull하기 
docker pull <IMAGE_NAME:TAG>

컨테이너 시작하기 
docker restart <CONTAINER_ID>

컨테이너 들어가기 
docker attach <CONTAINER_ID>
